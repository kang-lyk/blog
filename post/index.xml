<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 枯木逢春犹再发，人无两度再少年</title>
    <link>https://kang-lyk.github.io/blog/post/</link>
    <description>Recent content in Posts on 枯木逢春犹再发，人无两度再少年</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 21 Oct 2020 17:05:31 +0800</lastBuildDate>
    
	<atom:link href="https://kang-lyk.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>node.js常用的工具npx、nvm、nrm、pm2</title>
      <link>https://kang-lyk.github.io/blog/post/2020/1021/</link>
      <pubDate>Wed, 21 Oct 2020 17:05:31 +0800</pubDate>
      
      <guid>https://kang-lyk.github.io/blog/post/2020/1021/</guid>
      <description>npx是node自带的强大命令工具 调试安装模块 项目已经安装了ESlint npm i eslint -S 但未全局安装只能在项目根目录下的package.json文件中scripts字段时写命令。
如果想对单个文件制行ESLint命令, eslint file.js又不想全局安装，可以在已安装项目跟目录进行
npx eslint file.js
npx会找到根目录下的node_modules/.bin/eslint
避免全局安装模块 npx 可以包下载到临时目录使用，然后自动删除例如：
npx uglify-js@3.1.0 main.js -o ./dist/main.js
使用其他版本的node.js 利用npx的特性，可以使用多个node.js
npx node@10 -v v10.24.1 与下文中nvm不同的是npx是“使用”而不是“安装”，npx命令完成后会把包从临时目录删除下次无法继续使用。
执行github源码  # 执行 Gist 代码 $ npx https://gist.github.com/zkat/4bc19503fe9e9309e2bfaa2c58074d32 # 执行仓库代码 $ npx github:piuccio/cowsay hello -p和-c参数 **-p用于安装多个模块 **
npx -p gulp -p eslint
-c用于安装多个模块时将所有命令都用 npx 解释
以下的写完会报错
npx -p gulp -p eslint &#39;gulp | eslint&#39;
可以换成
npx -p gulp -p eslint -c &#39;gulp | eslint&#39;</description>
    </item>
    
    <item>
      <title>从Promise到async和await</title>
      <link>https://kang-lyk.github.io/blog/post/2020/1004/</link>
      <pubDate>Fri, 28 Feb 2020 06:20:45 +0800</pubDate>
      
      <guid>https://kang-lyk.github.io/blog/post/2020/1004/</guid>
      <description>Promise 是ES6异步编程的一种解决方案,js传统的回调函数和事件更合理更强大。es7标准引入了async/ await函数使得异步操作更加方便。async函数就是 Generator 函数的语法糖。 Generator 语法行为与传统函数完全不同，不容易理解，本文直接会直播跳过 Generator 讲asyn / await。
Promise的使用方法 Promise 对象是一个构造函数，用来生成 Promise 实例，如：
const promise = new Promise(function(resolve, reject) { // ... some code  if (/* 异步操作成功 */){ resolve(value) } else { reject(error) } }) resolve 在异步操作成功时调用,并将异步操作报出的结果作为参数传递出去。
reject 在异步操作失败时调用，并将异步操作报出的错误作为参数传递出去。
Promise 对像的使用方法如下：
promise.then(function(value) { // success }, function(error) { // failure }); 把jq的ajax函数传成Promise对象。
const getList = function(option) { return new Promise((resolve, reject) =&amp;gt; { $.ajax({ url: &amp;#39;/api/news/list&amp;#39;, data: option, success: function(data) { resolve(data) }, error: function(error) { reject(error) } }) }) } 使用方法</description>
    </item>
    
  </channel>
</rss>