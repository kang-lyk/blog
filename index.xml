<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>枯木逢春犹再发，人无两度再少年</title>
    <link>https://kang-lyk.github.io/blog/</link>
    <description>Recent content on 枯木逢春犹再发，人无两度再少年</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 28 Feb 2020 06:20:45 +0800</lastBuildDate>
    
	<atom:link href="https://kang-lyk.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>从Promise到async和await</title>
      <link>https://kang-lyk.github.io/blog/post/2020/1004/</link>
      <pubDate>Fri, 28 Feb 2020 06:20:45 +0800</pubDate>
      
      <guid>https://kang-lyk.github.io/blog/post/2020/1004/</guid>
      <description>Promise 是ES6异步编程的一种解决方案,js传统的回调函数和事件更合理更强大。es7标准引入了async/ await函数使得异步操作更加方便。async函数就是 Generator 函数的语法糖。 Generator 语法行为与传统函数完全不同，不容易理解，本文直接会直播跳过 Generator 讲asyn / await。
Promise的使用方法 Promise 对象是一个构造函数，用来生成 Promise 实例，如：
const promise = new Promise(function(resolve, reject) { // ... some code  if (/* 异步操作成功 */){ resolve(value) } else { reject(error) } }) resolve 在异步操作成功时调用,并将异步操作报出的结果作为参数传递出去。
reject 在异步操作失败时调用，并将异步操作报出的错误作为参数传递出去。
Promise 对像的使用方法如下：
promise.then(function(value) { // success }, function(error) { // failure }); 把jq的ajax函数传成Promise对象。
const getList = function(option) { return new Promise((resolve, reject) =&amp;gt; { $.ajax({ url: &amp;#39;/api/news/list&amp;#39;, data: option, success: function(data) { resolve(data) }, error: function(error) { reject(error) } }) }) } 使用方法</description>
    </item>
    
  </channel>
</rss>